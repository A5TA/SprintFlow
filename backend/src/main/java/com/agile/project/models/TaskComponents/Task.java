package com.agile.project.models.TaskComponents;

import com.agile.project.models.ProjectComponents.Project;
import com.agile.project.models.UserComponents.User;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data //Generates Getters and Setters
@Builder //Useful for Builder Design pattern
@NoArgsConstructor //makes the no argument constructor
@AllArgsConstructor // makes the all arguments constructor with the id,firstname...
@Entity
public class Task {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //Makes it so that the id is autogenerated, using Auto makes the hibernate make the best decision for us
    private Integer id;
    private String name;
    private String description;
    private Date dueDate;
    private int points;
    private TaskStatus taskStatus;


    //Useful link explaining these Relationships: https://medium.com/@arijit83work/bidirectional-relationship-using-onetomany-manytoone-annotation-in-spring-boot-3b91980ca222
    @ManyToOne(fetch = FetchType.LAZY) //lazy loading the relationship with the user
    @JoinColumn(name = "user_id")
    private User user;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY) //lazy loading the relationship with the user
    @JoinColumn(name = "project_id")
    private Project project;

    //required for testing
//    @Override
//    public String toString() {
//        return "Task{" +
//                "id=" + id +
//                ", name='" + name + '\'' +
//                ", description='" + description + '\'' +
//                '}';
//    }

}
